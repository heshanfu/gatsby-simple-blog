{"version":3,"sources":["webpack:///./src/templates/tag-page.js","webpack:///./src/components/PostAbbrev.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","_components_Layout__WEBPACK_IMPORTED_MODULE_2__","_components_SEO__WEBPACK_IMPORTED_MODULE_3__","_components_PostAbbrev__WEBPACK_IMPORTED_MODULE_4__","_components_Bio__WEBPACK_IMPORTED_MODULE_5__","TagPageTemplate","_ref","pageContext","data","tag","_data$allMarkdownRema","allMarkdownRemark","edges","totalCount","siteTitle","site","siteMetadata","title","tagHeader","a","createElement","location","breadcrumbs","text","url","description","map","_ref2","node","frontmatter","fields","slug","key","date","timeToRead","style","marginTop","propTypes","PropTypes","shape","string","isRequired","number","arrayOf","gatsby__WEBPACK_IMPORTED_MODULE_2__","_utils_typography__WEBPACK_IMPORTED_MODULE_3__","_utils_helpers__WEBPACK_IMPORTED_MODULE_4__","_TagList__WEBPACK_IMPORTED_MODULE_5__","PostAbbrev","excerptPart","tagsPart","excerpt","tags","dangerouslySetInnerHTML","__html","margin","baseUrl","fontFamily","fontSize","rhythm","marginBottom","boxShadow","to","rel","formatReadingTime","array","defaultProps"],"mappings":"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","file":"component---src-templates-tag-page-js-c11c05bbf33d2101ca04.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Components\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/SEO';\nimport PostAbbrev from '../components/PostAbbrev';\nimport Bio from '../components/Bio';\n\nconst TagPageTemplate = ({ pageContext, data }) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const siteTitle = data.site.siteMetadata.title;\n  const tagHeader = `${totalCount} post${totalCount === 1 ? '' : 's'} tagged with \"${tag}\"`;\n\n  return (\n    <Layout\n      location=\"location\"\n      title={siteTitle}\n      breadcrumbs={[{ text: 'Tags', url: '/tags' }, { text: tag }]}\n    >\n      <SEO title={tagHeader} description={tagHeader} />\n      <h1>{tagHeader}</h1>\n      <main>\n        {edges.map(({ node }) => {\n          const title = node.frontmatter.title || node.fields.slug;\n          return (\n            <PostAbbrev\n              key={node.fields.slug}\n              slug={node.fields.slug}\n              date={node.frontmatter.date}\n              timeToRead={node.timeToRead}\n              title={title}\n            />\n          );\n        })}\n      </main>\n      <div style={{ marginTop: 50 }} />\n      <aside>\n        <Bio />\n      </aside>\n    </Layout>\n  );\n};\n\nTagPageTemplate.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }).isRequired,\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired,\n      ),\n    }),\n  }).isRequired,\n};\n\nexport default TagPageTemplate;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          timeToRead\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Link } from 'gatsby';\n\nimport { rhythm } from '../utils/typography';\nimport { formatReadingTime } from '../utils/helpers';\n\nimport TagList from './TagList';\n\nfunction PostAbbrev({ slug, title, date, timeToRead, excerpt, tags }) {\n  let excerptPart;\n  if (excerpt) {\n    excerptPart = (\n      <p\n        dangerouslySetInnerHTML={{\n          __html: excerpt,\n        }}\n      />\n    );\n  }\n\n  let tagsPart;\n  if (tags) {\n    tagsPart = (\n      <TagList style={{ margin: '0.5rem 0 -0.5rem -0.5rem' }} tags={tags} baseUrl=\"/tags\" />\n    );\n  }\n\n  return (\n    <article>\n      <header>\n        <h3\n          style={{\n            fontFamily: 'Montserrat, sans-serif',\n            fontSize: rhythm(1),\n            marginBottom: rhythm(1 / 4),\n          }}\n        >\n          <Link style={{ boxShadow: 'none' }} to={slug} rel=\"bookmark\">\n            {title}\n          </Link>\n        </h3>\n        {tagsPart}\n        <small>{`${date} â€¢ ${formatReadingTime(timeToRead)}`}</small>\n        {excerptPart}\n      </header>\n    </article>\n  );\n}\n\nPostAbbrev.propTypes = {\n  slug: PropTypes.string.isRequired,\n  title: PropTypes.string,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number.isRequired,\n  excerpt: PropTypes.string,\n  tags: PropTypes.array,\n};\n\nPostAbbrev.defaultProps = {\n  title: null,\n  excerpt: null,\n  tags: null,\n};\n\nexport default PostAbbrev;\n"],"sourceRoot":""}